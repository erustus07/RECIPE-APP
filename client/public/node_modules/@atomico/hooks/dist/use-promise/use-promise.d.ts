/**
 * @template {()=>Promise<any>} T
 * @example
 * ```js
 * const [executePromise, setExecutePromise] = useState();
 * const [ result, status ] = usePromise(()=>fetch("./any").then(res=>res.json()),executePromise);
 * ```
 * @param {T} promise -
 * @param {boolean} run
 * @param {any[]} [args]
 * @returns {T extends (...args:any[])=>Promise<infer R> ?  State<R>  :  State<any> }
 */
export function usePromise<T extends () => Promise<any>>(promise: T, run: boolean, args?: any[]): T extends (...args: any[]) => Promise<infer R> ? State<R> : State<any>;
export type Status = {
    quiet: "";
    pending: "pending";
    fulfilled: "fulfilled";
    rejected: "rejected";
};
/**
 * @type {Status}
 */
export const Status: Status;
export type PromiseStatus = Status["quiet"] | Status["pending"] | Status["fulfilled"] | Status["rejected"];
export type State<T> = [T, PromiseStatus];
