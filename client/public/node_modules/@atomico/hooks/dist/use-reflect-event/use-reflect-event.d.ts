/**
 * This hook reflects an event and cancels its propagation
 * @param {string} type
 * @param {import("atomico").Ref<Element>} refFrom - event source reference
 * @param {import("atomico").Ref<Element>} refTo - event destination reference
 * @param {{capture?:boolean, composed?:boolean}} [options] - allows to reflect the events from target with independent shadowDOM to the host
 */
export function useReflectEvent(refFrom: import("atomico").Ref<Element>, refTo: import("atomico").Ref<Element>, type: string, { capture, composed }?: {
    capture?: boolean;
    composed?: boolean;
}): void;
export function reflectEvent(current: Element, event: Event, composed?: boolean): void;
