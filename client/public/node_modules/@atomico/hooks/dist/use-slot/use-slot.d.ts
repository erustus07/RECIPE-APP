/**
 * returns the assigned nodes of a slot
 * @template {ChildNode} T
 * @param {import("atomico").Ref<HTMLSlotElement>} ref
 * @param {(node:ChildNode)=>boolean} [filter]  - allows you to filter the nodes to be associated only when they change
 * @returns {import("atomico").Ref<T>["current"][]}
 */
export function useSlot<T extends ChildNode>(ref: import("atomico").Ref<HTMLSlotElement>, filter?: (node: ChildNode) => boolean): (T extends import("atomico").AtomicoElement ? InstanceType<T> : T)[];
/**
 * creates a persistent list of nodes from a source with the intention of
 * keeping the node in the list as long as it remains on the host
 * @template {ChildNode} T
 * @param {import("atomico").Ref<HTMLSlotElement>} ref
 * @param {(node:ChildNode)=>boolean} [filter]  - allows you to filter the nodes to be associated only when they change
 * @returns {import("atomico").Ref<T>["current"][]}
 */
export function useProxySlot<T extends ChildNode>(ref: import("atomico").Ref<HTMLSlotElement>, filter?: (node: ChildNode) => boolean): (T extends import("atomico").AtomicoElement ? InstanceType<T> : T)[];
