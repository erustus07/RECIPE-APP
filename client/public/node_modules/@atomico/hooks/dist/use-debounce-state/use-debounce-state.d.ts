/**
 * Generates a bottleneck in the definition of the state
 * @template T
 * @param {number} delay
 * @param {T} [initialState]
 * @param {"timeout"|"fps"|"idle"} [mode]
 * @return {[T extends (...args:any[])=>infer R ? R : T, (current: T extends (...args:any[])=>infer R ? R : T)=>void]}
 */
export function useDebounceState<T>(delay: number, initialState?: T, mode?: "timeout" | "fps" | "idle"): [T extends (...args: any[]) => infer R ? R : T, (current: T extends (...args: any[]) => infer R_1 ? R_1 : T) => void];
export function fps(length?: number): Promise<void>;
export function idle(ms: number): Promise<void>;
export function timeout(ms: number): Promise<void>;
