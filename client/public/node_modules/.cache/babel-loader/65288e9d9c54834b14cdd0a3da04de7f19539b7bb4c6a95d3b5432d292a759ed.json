{"ast":null,"code":"var _jsxFileName = \"/home/erustus/Documents/RECIPE-APP/client/src/components/CommentComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommentComponent({\n  recipeId\n}) {\n  _s();\n  const [content, setContent] = useState(\"\");\n  const [comments, setComments] = useState(null);\n  const fetchComments = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/recipes/${recipeId}/comments`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setComments(data); // Assuming data is an array of comments\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      setComments([]); // Set comments to an empty array on error\n    }\n  };\n  useEffect(() => {\n    fetchComments();\n  }, [recipeId]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const res = await fetch(`http://localhost:5000/recipes/${recipeId}/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          content,\n          recipe_id: recipeId\n        }),\n        credentials: 'include' // Include credentials in the request\n      });\n      const data = await res.json();\n      if (!res.ok) {\n        alert(`Failed to add comment: ${data.message}`);\n        console.log(data);\n        throw new Error(\"Failed to add comment\");\n      } else {\n        alert(\"Comment added successfully!\");\n        console.log(data);\n        fetchComments();\n      }\n      setContent(\"\");\n    } catch (error) {\n      console.error(\"Error posting comment:\", error);\n    }\n  };\n  if (comments === null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading comments...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), comments.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No comments yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"comments-container\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.content\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: content,\n        name: \"content\",\n        id: \"content\",\n        onChange: e => setContent(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(CommentComponent, \"IWaOa9UtIYpwTQynjeU6upFNuK0=\");\n_c = CommentComponent;\nvar _c;\n$RefreshReg$(_c, \"CommentComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CommentComponent","recipeId","_s","content","setContent","comments","setComments","fetchComments","response","fetch","ok","Error","status","data","json","error","console","handleSubmit","e","preventDefault","res","method","headers","body","JSON","stringify","recipe_id","credentials","alert","message","log","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","map","comment","id","onSubmit","type","value","name","onChange","target","_c","$RefreshReg$"],"sources":["/home/erustus/Documents/RECIPE-APP/client/src/components/CommentComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nexport default function CommentComponent({ recipeId }) {\n  const [content, setContent] = useState(\"\");\n  const [comments, setComments] = useState(null);\n\n  const fetchComments = async () => {\n    try {\n      const response = await fetch(\n        `http://localhost:5000/recipes/${recipeId}/comments`\n      );\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setComments(data); // Assuming data is an array of comments\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      setComments([]); // Set comments to an empty array on error\n    }\n  };\n\n  useEffect(() => {\n    fetchComments();\n  }, [recipeId]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const res = await fetch(\n        `http://localhost:5000/recipes/${recipeId}/comments`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ content, recipe_id: recipeId }),\n          credentials: 'include', // Include credentials in the request\n        }\n      );\n      const data = await res.json();\n      if (!res.ok) {\n        alert(`Failed to add comment: ${data.message}`);\n        console.log(data);\n        throw new Error(\"Failed to add comment\");\n      } else {\n        alert(\"Comment added successfully!\");\n        console.log(data);\n        fetchComments(); \n      }\n      setContent(\"\"); \n    } catch (error) {\n      console.error(\"Error posting comment:\", error);\n    }\n  };\n\n  if (comments === null) {\n    return <p>Loading comments...</p>;\n  }\n\n  return (\n    <div>\n      <h3>Comments</h3>\n      {comments.length === 0 ? (\n        <p>No comments yet.</p>\n      ) : (\n        <ul className=\"comments-container\">\n          {comments.map((comment) => (\n            <p key={comment.id}>{comment.content}</p>\n          ))}\n        </ul>\n      )}\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={content}\n          name=\"content\"\n          id=\"content\"\n          onChange={(e) => setContent(e.target.value)}\n        />\n        <button type=\"submit\">Add comment</button>\n      </form>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}