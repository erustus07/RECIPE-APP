import {
  inputBaseStyle
} from "./chunk-7X3QSDGO.js";
import {
  InputGenericProps
} from "./chunk-YDOX3GBQ.js";
import {
  custom_elements_default
} from "./chunk-HM7LLTML.js";

// src/input/input.tsx
import { jsx as _jsx } from "atomico/jsx-runtime";
import { c, useProp, useRef, css, useHost } from "atomico";
import { useSlot } from "@atomico/hooks/use-slot";
import { useRender } from "@atomico/hooks/use-render";
import { useDisabled } from "@atomico/hooks/use-disabled";
import { usePropProxy } from "@atomico/hooks/use-prop-proxy";
import { serialize } from "atomico/utils";
function input({ type, status, ...props }) {
  const [, setValue] = useProp("value");
  const [, setFocus] = useProp("focused");
  const host = useHost();
  const refSlotLabel = useRef();
  const refSlotPrefix = useRef();
  const refSlotSuffix = useRef();
  const refInput = useRef();
  const slotLabel = useSlot(refSlotLabel).filter((el) => el instanceof Text ? el.textContent?.trim() : true);
  const slotPrefix = useSlot(refSlotPrefix);
  const slotSuffix = useSlot(refSlotSuffix);
  useRender(() => /* @__PURE__ */ _jsx("input", {
    onfocus: () => setFocus(true),
    onblur: () => setFocus(false),
    type,
    slot: "input",
    class: "reset",
    ref: refInput,
    ...props
  }));
  useDisabled();
  usePropProxy("value", {
    get() {
      return refInput.current?.value;
    }
  });
  return /* @__PURE__ */ _jsx("host", {
    shadowDom: true,
    oninput: () => setValue(refInput.current?.value),
    onclick: (event) => {
      let { target } = event;
      while (target && target != host.current) {
        if (target?.hasAttribute("focusable"))
          return;
        target = target.parentElement;
      }
      refInput.current?.focus();
    }
  }, /* @__PURE__ */ _jsx("div", {
    class: "input-row input"
  }, /* @__PURE__ */ _jsx("div", {
    class: "input-row",
    style: `--columns:${serialize(slotPrefix.length && "auto", slotLabel.length && "auto", "1fr", slotSuffix.length && "auto", props.required && "auto")}`
  }, /* @__PURE__ */ _jsx("slot", {
    ref: refSlotPrefix,
    name: "prefix",
    class: serialize(!slotPrefix.length && "hidden")
  }), /* @__PURE__ */ _jsx("div", {
    class: serialize(!slotLabel.length && "hidden")
  }, /* @__PURE__ */ _jsx("slot", {
    ref: refSlotLabel
  })), /* @__PURE__ */ _jsx("slot", {
    name: "input"
  }), /* @__PURE__ */ _jsx("slot", {
    ref: refSlotSuffix,
    name: "suffix",
    class: serialize(!slotSuffix.length && "hidden")
  }), /* @__PURE__ */ _jsx("div", {
    class: "input-line"
  }, /* @__PURE__ */ _jsx("div", {
    class: "input-line-fill"
  })))), /* @__PURE__ */ _jsx("style", null));
}
input.props = {
  ...InputGenericProps,
  type: String,
  list: String,
  pattern: String,
  min: Number,
  max: Number,
  minLength: Number,
  maxLength: Number,
  placeholder: String,
  checked: Boolean,
  status: {
    type: String,
    reflect: true
  },
  narrow: {
    type: Boolean,
    reflect: true
  },
  ghost: {
    type: Boolean,
    reflect: true
  },
  step: Number,
  color: {
    type: String
  }
};
input.styles = [
  inputBaseStyle,
  css`.hidden {
            display: none;
        }`
];
var Input = c(input);
custom_elements_default.define("input", Input);

export {
  Input
};
