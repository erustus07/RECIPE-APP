import {
  InputGenericProps
} from "./chunk-YDOX3GBQ.js";
import {
  ButtonActive
} from "./chunk-ZLHKWKNP.js";
import {
  tokens_default
} from "./chunk-PXPI3F43.js";
import {
  custom_elements_default
} from "./chunk-HM7LLTML.js";

// src/button/button.tsx
import { jsx as _jsx } from "atomico/jsx-runtime";
import { c, css, useRef, useProp } from "atomico";
import { useSlot } from "@atomico/hooks/use-slot";
import { useRender } from "@atomico/hooks/use-render";
import { useDisabled } from "@atomico/hooks/use-disabled";
import { useReflectEvent } from "@atomico/hooks/use-reflect-event";
var add = (value) => value ? 1 : 0;
function button({
  type,
  name,
  value,
  href,
  tabIndex,
  justify,
  color
}) {
  const refButtonActive = useRef();
  const refSlotPrefix = useRef();
  const refSlotSuffix = useRef();
  const refSlotContent = useRef();
  const refButtonLightDom = useRef();
  const refButtonShadowDom = useRef();
  const slotPrefix = useSlot(refSlotPrefix);
  const slotSuffix = useSlot(refSlotSuffix);
  const slotContent = useSlot(refSlotContent).filter((el) => el instanceof Text ? el.textContent?.trim() : true);
  const disabled = useDisabled();
  const [, setActive] = useProp("active");
  useRender(() => href ? /* @__PURE__ */ _jsx("a", {
    slot: "button",
    tabindex: "-1",
    href,
    ref: refButtonLightDom
  }) : /* @__PURE__ */ _jsx("button", {
    type: type || "submit",
    name,
    value,
    ref: refButtonLightDom,
    slot: "button",
    tabindex: "-1",
    disabled
  }), [type, name, value, href]);
  useReflectEvent(refButtonShadowDom, refButtonLightDom, "click");
  return /* @__PURE__ */ _jsx("host", {
    shadowDom: true,
    shape: slotPrefix.length && !slotContent.length ? "square" : null,
    ref: refButtonShadowDom,
    onclick: (event) => {
      if (refButtonActive.current?.setEvent) {
        refButtonActive.current.setEvent(event);
      }
    }
  }, /* @__PURE__ */ _jsx("button", {
    disabled,
    tabIndex,
    class: "button",
    onmousedown: () => setActive(true),
    onmouseup: () => setActive(false),
    style: justify ? `--justify:${justify}` : ""
  }, /* @__PURE__ */ _jsx("div", {
    class: "button-bg"
  }, /* @__PURE__ */ _jsx("slot", {
    name: "background"
  }, /* @__PURE__ */ _jsx(ButtonActive, {
    class: "button-fx",
    ref: refButtonActive
  }))), /* @__PURE__ */ _jsx("div", {
    class: "button-row",
    style: `--columns:${add(slotSuffix.length) + add(slotPrefix.length) + add(slotContent.length)}`
  }, /* @__PURE__ */ _jsx("slot", {
    ref: refSlotPrefix,
    name: "prefix"
  }), /* @__PURE__ */ _jsx("slot", {
    ref: refSlotContent
  }), /* @__PURE__ */ _jsx("slot", {
    ref: refSlotSuffix,
    name: "suffix"
  }))), /* @__PURE__ */ _jsx("style", null, color && `
                    :host{
                        --color-button-60: var(--color-${color}-60) !important;
                        --color-button-30: var(--color-${color}-30) !important;
                        --color-button-10: var(--color-${color}-10) !important;
                    }
                `));
}
button.props = {
  ...InputGenericProps,
  ghost: { type: Boolean, reflect: true },
  active: { type: Boolean, reflect: true },
  type: {
    type: String,
    reflect: true,
    value: "submit"
  },
  justify: {
    type: String,
    reflect: true
  },
  status: { type: String, reflect: true },
  shape: { type: String, reflect: true },
  href: { type: String, reflect: true },
  rounded: { type: Boolean, reflect: true },
  tabIndex: {
    type: Number,
    value: 0
  },
  color: {
    type: String,
    reflect: true
  }
};
button.styles = [
  tokens_default,
  css`:host {
            --width: auto;
            --min-width: auto;
            --padding: 0 var(--size-s);
            --justify: center;
            width: var(--width);
            display: inline-flex;
            min-height: var(--size-xl);
            color: var(--color-button-10);
        }

        :host([rounded]) {
            --border-radius: 100px;
        }

        :host([shape="square"]) {
            --padding: 0;
            --width: var(--size-xl);
        }

        :host([ghost]:not([color])) {
            --color-button-60: transparent;
        }

        :host([justify]) {
            --width: 100%;
            --min-width: 100%;
        }

        .button {
            width: var(--width);
            min-width: var(--min-width);
            border-radius: var(--border-radius);
            padding: var(--padding);
            box-sizing: border-box;
            font: unset;
            border: none;
            position: relative;
            background: none;
            cursor: pointer;
            color: unset;
        }
        .button-row {
            display: grid;
            place-content: center var(--justify);
            grid-template-columns: repeat(var(--columns), auto);
            gap: var(--size-xs);
            position: relative;
            z-index: 1;
            min-height: 100%;
        }
        .button-bg {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            border: var(--button-border);
            border-radius: var(--border-radius);
            box-sizing: border-box;
            transition: var(--transition-action);
            background: var(--color-button-60);
        }
        .button-fx {
            border-radius: var(--border-radius);
        }`
];
var Button = c(button);
custom_elements_default.define("button", Button);

export {
  Button
};
