import {
  Input
} from "./chunk-PDTPNZOB.js";
import {
  Icon
} from "./chunk-LXG56IO5.js";
import {
  Button
} from "./chunk-WZK6LTL7.js";
import {
  InputGenericProps
} from "./chunk-YDOX3GBQ.js";
import {
  custom_elements_default
} from "./chunk-HM7LLTML.js";

// src/input-counter/input-counter.tsx
import { jsx as _jsx } from "atomico/jsx-runtime";
import { c, css, useProp, useRef, useEvent } from "atomico";
import { useCssLightDom } from "@atomico/hooks/use-css-light-dom";
import { useClickPress } from "@atomico/hooks/use-click-press";
import { useDisabled } from "@atomico/hooks/use-disabled";
var sheet = css`:host {
        display: block;
    }
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
    }
    input[type="number"] {
        -moz-appearance: textfield;
    }`;
function counter({
  name,
  ghost,
  narrow,
  min,
  max,
  step,
  size
}) {
  useCssLightDom(sheet);
  const dispatch = useEvent("input", { bubbles: true });
  const currentStep = step || 1;
  const [value, setValue] = useProp("value");
  const refIncrement = useRef();
  const refDecrement = useRef();
  let calc = (mode) => {
    setValue((value2) => {
      let next = (value2 || 0) + currentStep * mode;
      next = min != null ? next > min ? next : min : next;
      next = max != null ? next > max ? max : next : next;
      return next;
    });
    dispatch();
  };
  useClickPress(refDecrement, () => calc(-1));
  useClickPress(refIncrement, () => calc(1));
  const disabled = useDisabled();
  return /* @__PURE__ */ _jsx("host", null, /* @__PURE__ */ _jsx(Input, {
    name,
    type: "number",
    style: "--text-align: center; --gap: 0px;",
    value,
    oninput: ({ currentTarget }) => {
      setValue(Number(currentTarget.value));
    },
    disabled,
    ghost,
    narrow,
    min,
    max,
    step,
    size
  }, /* @__PURE__ */ _jsx(Button, {
    disabled,
    slot: "prefix",
    ghost: true,
    ref: refDecrement,
    onclick: (event) => event.preventDefault(),
    size: "small"
  }, /* @__PURE__ */ _jsx(Icon, {
    slot: "prefix",
    type: "dash"
  })), /* @__PURE__ */ _jsx(Button, {
    disabled,
    slot: "suffix",
    ghost: true,
    ref: refIncrement,
    onclick: (event) => event.preventDefault(),
    size: "small"
  }, /* @__PURE__ */ _jsx(Icon, {
    slot: "prefix",
    type: "plus"
  }))));
}
counter.props = {
  ...InputGenericProps,
  value: {
    type: Number,
    value: 0
  },
  ghost: {
    type: Boolean,
    reflect: true
  },
  narrow: {
    type: Boolean,
    reflect: true
  },
  min: Number,
  max: Number,
  step: Number
};
var InputCounter = c(counter);
custom_elements_default.define("input-counter", InputCounter);

export {
  InputCounter
};
