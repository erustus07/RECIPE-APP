import {
  inputBaseStyle
} from "./chunk-7X3QSDGO.js";
import {
  Icon
} from "./chunk-LXG56IO5.js";
import {
  Button
} from "./chunk-WZK6LTL7.js";
import {
  InputGenericProps
} from "./chunk-YDOX3GBQ.js";
import {
  custom_elements_default
} from "./chunk-HM7LLTML.js";

// src/input-file/input-file.tsx
import { jsx as _jsx } from "atomico/jsx-runtime";
import { c, css, useProp, useRef } from "atomico";
import { useRender } from "@atomico/hooks/use-render";
import { useReflectEvent } from "@atomico/hooks/use-reflect-event";
import { useDisabled } from "@atomico/hooks/use-disabled";
import { useSlot } from "@atomico/hooks/use-slot";
function inputFile({ multiple, accept }) {
  const refInput = useRef();
  const refLabel = useRef();
  const refSlotPreview = useRef();
  const [SlotPreview] = useSlot(refSlotPreview);
  const [files, setFiles] = useProp("files");
  const disabled = useDisabled();
  useRender(() => /* @__PURE__ */ _jsx("input", {
    slot: "input",
    type: "file",
    ref: refInput,
    multiple,
    disabled,
    accept,
    onchange: (event) => {
      if (event.currentTarget.files?.length) {
        const files2 = Array.from(event.currentTarget.files);
        setFiles(files2);
      }
    }
  }));
  useReflectEvent(refLabel, refInput, "click");
  return /* @__PURE__ */ _jsx("host", {
    shadowDom: true
  }, /* @__PURE__ */ _jsx("slot", {
    name: "preview",
    ref: refSlotPreview,
    class: "hidden"
  }), /* @__PURE__ */ _jsx("div", {
    class: "input"
  }, /* @__PURE__ */ _jsx("div", {
    class: "input-file-header"
  }, /* @__PURE__ */ _jsx("div", {
    class: "input-file-item",
    ref: refLabel
  }, /* @__PURE__ */ _jsx("div", null, /* @__PURE__ */ _jsx("slot", null)), /* @__PURE__ */ _jsx(Button, {
    size: "small",
    ghost: true
  }, /* @__PURE__ */ _jsx(Icon, {
    slot: "prefix",
    type: "plus"
  })), !!files?.length && /* @__PURE__ */ _jsx("div", {
    class: "input-line"
  }, /* @__PURE__ */ _jsx("div", {
    class: "input-line-fill"
  })))), files?.map((file) => {
    return /* @__PURE__ */ _jsx("div", {
      class: "input-file-row"
    }, /* @__PURE__ */ _jsx("div", {
      class: "input-file-item"
    }, /* @__PURE__ */ _jsx("span", {
      class: "input-file-name"
    }, file.name), /* @__PURE__ */ _jsx(Button, {
      size: "small",
      ghost: true,
      onclick: () => {
        const data = new DataTransfer();
        files.filter((item) => item != file).map((file2) => data.items.add(file2));
        refInput.current.files = data.files;
        setFiles(Array.from(data.files));
      }
    }, /* @__PURE__ */ _jsx(Icon, {
      slot: "prefix",
      type: "closed"
    }))), SlotPreview && /* @__PURE__ */ _jsx(SlotPreview, {
      cloneNode: true,
      file
    }));
  })));
}
inputFile.props = {
  ...InputGenericProps,
  files: {
    type: Array,
    value: () => []
  },
  accept: String,
  multiple: {
    type: Boolean,
    reflect: true
  }
};
inputFile.styles = [
  inputBaseStyle,
  css`.input {
            padding: 0;
            overflow: hidden;
        }

        .input-file-header,
        .input-file-row .input-file-item {
            padding: 0 var(--space-x);
        }

        .input-file-item {
            min-height: var(--size-xl);
            display: grid;
            grid-template-columns: auto auto;
            place-content: center space-between;
            position: relative;
        }`
];
var InputFile = c(inputFile);
custom_elements_default.define("input-file", InputFile);

export {
  InputFile
};
