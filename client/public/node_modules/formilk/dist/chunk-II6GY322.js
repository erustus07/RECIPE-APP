import {
  inputBaseStyle
} from "./chunk-7X3QSDGO.js";
import {
  InputGenericProps
} from "./chunk-YDOX3GBQ.js";
import {
  custom_elements_default
} from "./chunk-HM7LLTML.js";

// src/input-textarea/input-textarea.tsx
import { jsx as _jsx } from "atomico/jsx-runtime";
import { c, css, useProp } from "atomico";
import { useRender } from "@atomico/hooks/use-render";
import { useDisabled } from "@atomico/hooks/use-disabled";
function textarea(props) {
  const [value, setValue] = useProp("value");
  const [, setFocus] = useProp("focused");
  useRender(() => /* @__PURE__ */ _jsx("input", {
    type: "text",
    slot: "input",
    maxLength: props.maxLength,
    minLength: props.minLength,
    required: props.required,
    value: props.value,
    name: props.name
  }));
  const disabled = useDisabled();
  return /* @__PURE__ */ _jsx("host", {
    shadowDom: true
  }, /* @__PURE__ */ _jsx("div", {
    class: "input"
  }, /* @__PURE__ */ _jsx("div", {
    class: "input-content input-proxy",
    textContent: (value || "").split(/(\n)/).map((child) => child === `
` ? `${child} ` : child).join("")
  }), /* @__PURE__ */ _jsx("slot", {
    name: "input"
  }), /* @__PURE__ */ _jsx("textarea", {
    value: props.value,
    rows: props.rows,
    cols: props.cols,
    placeholder: props.placeholder,
    onfocus: () => setFocus(true),
    onblur: () => setFocus(false),
    maxLength: props.maxLength,
    minLength: props.minLength,
    class: "input-content input-layer",
    oninput: ({ currentTarget }) => setValue(currentTarget.value),
    onkeydown: (event) => disabled && event.preventDefault()
  }), /* @__PURE__ */ _jsx("div", {
    class: "input-group"
  }, /* @__PURE__ */ _jsx("div", {
    class: "input-line"
  }, /* @__PURE__ */ _jsx("div", {
    class: "input-line-fill"
  })))));
}
textarea.props = {
  ...InputGenericProps,
  cols: Number,
  placeholder: {
    type: String,
    reflect: true
  },
  minLength: Number,
  maxLength: Number,
  rows: {
    type: Number,
    value: 1
  }
};
textarea.styles = [
  inputBaseStyle,
  css`:host {
            --resize: vertical;
            --space-top: 0.25em;
            min-width: 100%;
        }
        :host([size="small"]) {
            --space-top: 0;
        }
        .input-content {
            overflow: hidden;
            grid-gap: 0;
            padding-top: var(--space-top);
        }

        .input-proxy {
            opacity: 0;
            white-space: pre-wrap;
            word-break: break-word;
        }

        .input-content {
            width: 100%;
            background: none;
            border: none;
            font: unset;
            resize: var(--resize);
            box-sizing: border-box;
            margin: 0px;
            outline: none;
        }

        .input-layer {
            position: absolute;
            height: 100%;
            top: 0;
            left: 0;
            min-height: 100%;
            max-height: 100%;
            z-index: 1;
            padding-left: var(--space-x);
            padding-right: var(--space-x);
        }

        .input-group {
            width: 100%;
            position: bottom;
            padding: 0 var(--space-x);
            box-sizing: border-box;
            bottom: 0;
            left: 0;
            position: absolute;
        }

        .input-line {
            position: relative;
        }

        ::slotted([slot="input"]) {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            border: none;
        }`
];
var Textarea = c(textarea);
custom_elements_default.define("textarea", Textarea);

export {
  Textarea
};
