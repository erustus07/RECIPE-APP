import {
  tokens_default
} from "./chunk-PXPI3F43.js";
import {
  custom_elements_default
} from "./chunk-HM7LLTML.js";

// src/label/label.tsx
import { jsx as _jsx } from "atomico/jsx-runtime";
import { c, css, useRef } from "atomico";
import { serialize } from "atomico/utils";
import { useSlot } from "@atomico/hooks/use-slot";
import { useCurrentValue } from "@atomico/hooks/use-current-value";
import { useReflectEvent } from "@atomico/hooks/use-reflect-event";
var RefEmpty = { current: null };
function label({ disableReflect }) {
  const refPrefix = useRef();
  const refAction = useRef();
  const refContent = useRef();
  const refMessage = useRef();
  const refContentAction = useRef();
  const slotPrefix = useSlot(refPrefix);
  const slotAction = useSlot(refAction);
  const slotMessage = useSlot(refMessage);
  const refFirstAction = useCurrentValue(slotAction[0]);
  useReflectEvent(refContent, disableReflect ? RefEmpty : refFirstAction, "click");
  return /* @__PURE__ */ _jsx("host", {
    shadowDom: true
  }, /* @__PURE__ */ _jsx("div", {
    className: "label-header"
  }, /* @__PURE__ */ _jsx("div", {
    class: "label-row"
  }, /* @__PURE__ */ _jsx("div", {
    class: `label-center label-prefix ${slotPrefix.length ? "" : "hidden"}`
  }, /* @__PURE__ */ _jsx("slot", {
    ref: refPrefix,
    name: "prefix"
  })), /* @__PURE__ */ _jsx("div", {
    ref: refContent,
    class: "label-center label-content"
  }, /* @__PURE__ */ _jsx("slot", null))), /* @__PURE__ */ _jsx("div", {
    ref: refContentAction,
    class: serialize("label-center label-action", !slotAction.length && "hidden")
  }, /* @__PURE__ */ _jsx("slot", {
    ref: refAction,
    name: "action"
  })), /* @__PURE__ */ _jsx("style", null, `:host{--columns-row: ${serialize(slotPrefix.length && "auto", "1fr")}`)), /* @__PURE__ */ _jsx("div", {
    class: serialize("label-footer", !slotMessage.length && "hidden")
  }, /* @__PURE__ */ _jsx("slot", {
    name: "message",
    ref: refMessage
  })));
}
label.props = {
  disableReflect: {
    type: Boolean
  },
  reverse: {
    type: Boolean,
    reflect: true
  },
  vertical: {
    type: Boolean,
    reflect: true
  }
};
label.styles = [
  tokens_default,
  css`:host {
            width: 100%;
            display: grid;
            --columns: 1fr auto;
            --gap: var(--size-xs);
            min-height: var(--size-xl);
            box-sizing: border-box;
        }

        :host,
        .label-header,
        .label-row {
            display: grid;
            grid-gap: var(--gap);
        }

        .label-header {
            grid-template-columns: var(--columns);
            min-height: var(--size-min);
        }

        .label-row {
            grid-template-columns: var(--columns-row);
        }

        .label-center {
            display: flex;
            align-items: center;
            min-height: var(--size-min);
        }

        .label-prefix,
        .label-action {
            max-height: var(--size-min);
        }

        :host([reverse]) .label-action {
            order: -1;
        }

        :host([reverse]) .label-prefix {
            order: 1;
        }

        .hidden {
            display: none;
        }

        ::slotted([slot="action"]) {
            cursor: pointer;
        }
        :host([vertical]) {
            --columns: 1fr;
            --gap: var(--space-y);
        }`
];
var Label = c(label);
custom_elements_default.define("label", Label);

export {
  Label
};
