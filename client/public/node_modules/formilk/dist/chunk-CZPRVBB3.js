import {
  inputBaseStyle
} from "./chunk-7X3QSDGO.js";
import {
  Icon
} from "./chunk-LXG56IO5.js";
import {
  InputGenericProps
} from "./chunk-YDOX3GBQ.js";
import {
  custom_elements_default
} from "./chunk-HM7LLTML.js";

// src/input-select/input-select.tsx
import { jsx as _jsx } from "atomico/jsx-runtime";
import { c, useRef, css, useUpdate, useProp } from "atomico";
import { useSlot } from "@atomico/hooks/use-slot";
import { useRender } from "@atomico/hooks/use-render";
import { useDisabled } from "@atomico/hooks/use-disabled";
function select({ name, placeholder }) {
  const refSlotOption = useRef();
  const slotOption = useSlot(refSlotOption);
  const disabled = useDisabled();
  const update = useUpdate();
  const [value, setValue] = useProp("value");
  const [, setFocus] = useProp("focused");
  useRender(() => /* @__PURE__ */ _jsx("select", {
    slot: "input",
    class: "reset",
    name,
    disabled,
    onchange: ({ currentTarget: { value: value2 } }) => setValue(value2),
    onfocus: () => setFocus(true),
    onblur: () => setFocus(false)
  }, placeholder && /* @__PURE__ */ _jsx("option", {
    value: "",
    disabled: true,
    selected: true
  }, placeholder), slotOption.map(function option(child) {
    return child?.options?.length ? /* @__PURE__ */ _jsx("optgroup", {
      label: child.label
    }, child?.options.map(option)) : /* @__PURE__ */ _jsx("option", {
      value: child.value,
      selected: value === child.value || child.selected
    }, child.label || child.value);
  })));
  return /* @__PURE__ */ _jsx("host", {
    shadowDom: true,
    onOptionChange: update
  }, /* @__PURE__ */ _jsx("slot", {
    name: "option",
    ref: refSlotOption
  }), /* @__PURE__ */ _jsx("div", {
    class: "input"
  }, /* @__PURE__ */ _jsx("slot", {
    name: "input"
  }), /* @__PURE__ */ _jsx("div", {
    class: "input-space"
  }, /* @__PURE__ */ _jsx("div", {
    className: "input-row"
  }, /* @__PURE__ */ _jsx(Icon, {
    type: "down"
  }), /* @__PURE__ */ _jsx("div", {
    class: "input-line"
  }, /* @__PURE__ */ _jsx("div", {
    class: "input-line-fill"
  }))))));
}
select.props = {
  ...InputGenericProps,
  placeholder: String,
  narrow: {
    type: Boolean,
    reflect: true
  },
  ghost: {
    type: Boolean,
    reflect: true
  }
};
select.styles = [
  inputBaseStyle,
  css`::slotted([slot="input"]) {
            height: var(--size-xl);
            position: relative;
            padding: 0 calc(var(--space-x) + var(--size-xxs) + var(--size-xs)) 0
                var(--space-x);
            appearance: none;
            z-index: 1;
        }
        .input-space {
            width: 100%;
            position: absolute;
            top: 0;
            left: 0;
            padding: 0 var(--size-s);
            box-sizing: border-box;
            z-index: 0;
        }
        .input-row {
            justify-content: end;
        }
        .input {
            padding: 0;
        }`
];
var InputSelect = c(select);
custom_elements_default.define("input-select", InputSelect);

export {
  InputSelect
};
